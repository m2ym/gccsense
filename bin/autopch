#!/usr/bin/env ruby
# autopch - Apply precompiled headers automatically
# Copyright (C) 2010  Tomohiro Matsuyama <tomo@cx4a.org>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'optparse'
require 'pathname'
require 'stringio'
require 'digest/md5'
require 'fileutils'
require 'shellwords'

def Shellwords.unshellwords(array)
  array.map {|elt| elt.index(/\s/) ? "\"#{elt.gsub(/([\"\\$])/, '\\1')}\"" : elt}.join(' ')
end

class AutoPCH
  VERSION = '0.2'

  class PPDirectiveReader
    DIRECTIVE_REGEXP = /^\s*#/

    def initialize(path)
      @io = File.open(path, 'rb');
    end

    def close
      @io.close
    end

    def read_directive(skip_code = false)
      dir = read_nonblank_code_line
      return unless dir
      
      if skip_code
        while dir !~ DIRECTIVE_REGEXP
          dir = read_nonblank_code_line
          return unless dir
        end
      else
        return unless dir =~ DIRECTIVE_REGEXP
      end

      # handle backslashes
      l = dir
      dir << l while l =~ /\\\s*$/ && l = read_code_line

      dir
    end

    def read_code_line
      l = @io.gets

      # skip comments
      while l && start = l.index(/\/[\/*]/)
        if $& == '//'         # c++ style comment
          l = l[0, start] + "\n"
        else                  # c style comment
          pos = start
          while !(last = l.index('*/', pos)) && r = @io.gets
            pos = l.length
            l << r
          end
          l[start, last + 2] = "\n" if last
        end
      end

      l
    end

    def read_nonblank_code_line
      while l = read_code_line
        return l unless l =~ /^\s*$/
      end
    end
  end

  class DependencyFile
    attr_reader :dependencies

    def initialize(path)
      dep = File.read(path)
      start = dep.index(':')
      @dependencies = start ? dep[start + 2..dep.length].split(/[\s\\]+/) : []
      @dependencies.shift       # ignore itself
    end
  end

  GCC_INCLUDE_DIR_REGEXP = /^-(?:I)(.*)$/
  GCC_ONE_ARG_REGEXP = /^-(?:idirafter|imacros|include|iprefix|isystem|iwithprefix|iwithprefixbefore|L|D|U|x|MF|MT|MQ|aux-info|-param|A|Xlinker|u)(.*)$/
  PCH_SKIP_ARG_REGEXP = /^-(?:fsyntax-only|code-completion-at)/
  PCH_SKIP_ONE_ARG_REGEXP = /^-(?:o)(.*)$/

  def initialize
    prepare
  end

  def prepare
    @cwd = Dir.getwd
    @tmp_dir = ENV['TMPDIR'] || ENV['TMP'] || ENV['TEMP'] || '/tmp'
    @cache_dir = "#{ENV['HOME']}/.autopch"
    @args = []
    Dir.mkdir(@cache_dir) unless File.directory? @cache_dir
  end

  def process(args)
    if parse_args(args)
      compile_all
    else
      fallback
    end
  end

  def parse_args(args)
    # parse own args
    args = args.dup
    OptionParser.new('Usage: autopch [options] [gcc-driver] [gcc-options]') do |opt|
      opt.version = VERSION
      opt.on('-v', '--verbose')       { @verbose = true }
      opt.on('-x', '--language=LANG') { @lang = v }
      opt.order! args

      @driver = args.shift
      die_with_help(opt, 'driver not given') unless @driver

      @lang ||= @driver =~ /[gc]\+\+/ ? 'c++' : 'c'
    end

    # parse gcc args
    @args = args.dup
    @cc_args = []
    @pch_args = []
    @input_files = []
    @include_dirs = []
    while arg = args.shift
      case arg
      when '-c'
        @c_opt_given = true
        @cc_args << arg
      when GCC_INCLUDE_DIR_REGEXP
        @cc_args << arg
        @pch_args << arg
        if $1.empty?
          arg = args.shift
          @cc_args << arg
          @pch_args << arg
          @include_dirs << arg
        else
          @include_dirs << $1
        end
      when GCC_ONE_ARG_REGEXP
        @cc_args << arg
        @pch_args << arg
        if $1.empty?
          arg = args.shift
          @cc_args << arg
          @pch_args << arg
        end
      when PCH_SKIP_ARG_REGEXP
        @cc_args << arg
      when PCH_SKIP_ONE_ARG_REGEXP
        @cc_args << arg
        @cc_args << args.shift if $1.empty?
      when /^-/
        @cc_args << arg
        @pch_args << arg
      else
        @input_files << arg
      end
    end
    
    !@input_files.empty? && @c_opt_given
  end

  def fallback
    if @verbose
      $stderr.puts 'fallbacking: no input files' if @input_files.empty?
      $stderr.puts 'fallbacking: -c option not found' if !@c_opt_given
    end
    exec([@driver, @driver], *@args)
  end

  def compile_all
    @input_files.each do |file|
      h = make_pch(file)
      compile(file, h)
    end
  end

  def compile(c, h)
    args = (h ? ['-include', h] : []) + @cc_args + ['-I', @cwd, c]
    unless system([@driver, @driver], *args)
      exit $?.to_i
    end
  end

  def make_pch(input_file)
    path = Pathname.new(input_file).realpath.to_s rescue nil
    return unless path

    header = read_header(path)
    return if header =~ /\A\s*\z/ # no worth to make pch

    digest = make_header_digest(path, header)
    dep = cache_path(dep_name(digest))

    if file_exists? dep
      dep_digest = make_dependency_digest(dep, digest)
      h = cache_path(h_name(dep_digest))
      pch = cache_path(pch_name(dep_digest))
    end

    if file_exists? h, pch, dep
      # LRU cache
      now = Time.now
      File.utime(now, now, h, pch, dep)
    else
      h, pch = compile_header(header, dep, digest)
      return unless file_exists? h, pch
    end
    $stderr.puts "using pch: #{input_file}" if @verbose

    h
  end

  def compile_header(header, dep, digest)
    tmp_h = "#{@tmp_dir}/autopch.h"
    tmp_pch = "#{@tmp_dir}/autopch.h.gch"

    # write header contents
    File.open(tmp_h, 'wb') {|f| f.write(header)}

    # generate dependency file
    args = @pch_args + ['-I', @cwd, '-MM', '-MF', dep, tmp_h]
    $stderr.puts "generating dependency file: #{Shellwords.unshellwords([@driver, *args])}" if @verbose
    unless system([@driver, @driver], *args)
      exit $?.to_i
    end

    # compile header
    args = @pch_args + ['-I', @cwd, '-x', "#{@lang}-header", tmp_h]
    $stderr.puts "compiling header: #{Shellwords.unshellwords([@driver, *args])}" if @verbose
    unless system([@driver, @driver], *args)
      exit $?.to_i
    end

    if file_exists? dep, tmp_h, tmp_pch
      # succeed
      dep_digest = make_dependency_digest(dep, digest)
      h = cache_path(h_name(dep_digest))
      pch = cache_path(pch_name(dep_digest))

      FileUtils.cp tmp_h, h
      FileUtils.cp tmp_pch, pch
    end

    [h, pch]
  end

  def read_header(path)
    begin
      reader = PPDirectiveReader.new(path)

      dirs = []
      cond_start = nil
      cond_depth = 0
      while dir = reader.read_directive
        name, value = (dir =~ /^\s*#([^\s]*)(?:\s+([^\s]*))/) && $1, $2

        case name
        when 'pragma'
          break if value == 'hdrstop'
        when 'if', 'ifdef', 'ifndef'
          unless cond_start
            cond_start = dirs.length
            cond_depth = 0
          end
          cond_depth += 1
        when 'endif'
          if cond_start
            cond_depth -= 1
            cond_start = nil if cond_depth == 0
          end
        when 'include'
          if value && value[0] == ?\"
            file = find_header_file(value[1...value.length - 1], [File.dirname(path), *@include_dirs])
            break if file && !include_guard?(file)
          end
        end

        dirs << dir
      end
    ensure
      reader.close
    end

    dirs[cond_start..dirs.length] = [] if cond_start
    dirs.join
  end

  def include_guard?(file)
    begin
      reader = PPDirectiveReader.new(file)

      return false unless reader.read_directive =~ /^\s*#ifndef\s+([^\s]+)\s*$/
      name = $1

      return false unless reader.read_directive =~ /^\s*#define\s+#{name}\s*$/

      valid = false
      cond_depth = 1
      cond_toplev = 0
      while dir = reader.read_directive(true)
        valid = false
        name = dir =~ /\s*#([^\s]+)/ && $1

        case name
        when 'if', 'ifdef', 'ifndef'
          cond_depth += 1
        when 'endif'
          cond_depth -= 1
          if cond_depth == 0
            valid = true if cond_toplev == 0
            cond_toplev += 1
          end
        end
      end
    ensure
      reader.close
    end
    
    valid
  end

  def make_header_digest(path, header)
    src = StringIO.new
    src << @cwd << @driver << path << @pch_args.join << header
    Digest::MD5.hexdigest(src.string)
  end

  def make_dependency_digest(dep, salt)
    deps = DependencyFile.new(dep).dependencies
    src = StringIO.new
    src << salt
    deps.each do |file|
      src << file << File.mtime(file).to_i if File.exists?(file)
    end
    Digest::MD5.hexdigest(src.string)
  end

  def find_header_file(name, dirs)
    dirs.each do |dir|
      file = "#{dir}/#{name}"
      return file if File.file?(file)
    end
    nil
  end

  def h_name(base) "#{base}.h" end
  def pch_name(base) "#{h_name(base)}.gch" end
  def dep_name(base) "#{base}.dep" end
  def cache_path(name) "#{@cache_dir}/#{name}" end
  def file_exists?(*files)
    files.all? {|file| file && File.exists?(file)}
  end

  def die(msg)
    $stderr.puts msg
    exit 1
  end

  def die_with_help(opt, msg)
    $stderr.puts msg
    $stderr.puts
    $stderr.puts opt.help
    exit 1
  end
end

AutoPCH.new.process(ARGV) if $0 == __FILE__
